inorder: prints between the recursive call


inorder(node):
if node == null: return
inorder(node.left)
print(node.value)
inorder(node.right)



Given: Binary Search Tree
		
		11
	        /	         \
	     6	          15
	/       \	      /       \
             3          8	  13            17
           /    \	/     \            \
        1	  5         12     14           19

How preorder works?

A) maintain Call stack  //why? to track what is called during recursion
				if we know what called -> we know what node to go to
     maintain output order  /whenever we Print(A) : A will be shown
	Order: A  B  D  H  I 	E C F J K G L
B) Start traversal (using preorder rule)
	1) 	inorder(11)	-> callstack : 11
		go to 11-> left = 6
		Inorder(11.left)
	2) 	inorder(6)   	-> push 6 to callstack : 11 6
		go to 6 -> left
		Inorder(6.left)
	3) 	Inorder(3)	-> callstack : 11 6 3
		Inorder(3.left) : 1  go to D -> left
	4) 	inorder(H)	-> callstack : 11 6 3 1	//notice havent printed yet
		go to 1 -> left  //null
		inorder(1.left) = preorder(null)
			if node == null ; return	//1 gets removed from call stack	//recurse
		print(1)										//Print(1)
		inorder(1.right)
	 			-> callstack : 11 , 6 , 3 
	5) 	//return/recurse  to code after 3.left i.e print(3)
		print(3)										//Print(3)
		Inorder(3.right) = Inorder(5)
		if node == null ; return	//H gets removed from call stack
	 			-> callstack : 11, 6 , 3 , 5 
			//3.left and 3.right done
		print(5)										//Print(5)
		inorder(5.right)
		//return to code after 3.right not left both explored
		print(6)										//Print(6)
		//return to 6.right
		
		
	6) 	Inorder(6.right) = Inorder(8)
		Inorder(8.left)
		print(8)										//Print(8)
		Inorder(8.right) //return
		//return to 6  , left and right done
		//return to 11
		print(11)										//Print(11)
		inorder(11.right)									

	7) Similarly
		11.right -> 15
		15.left ->13
		13 .left -> 12
		12.left = null
		print(12)										//Print(12)
		12.right = null
		return to print(13)									//Print(13)
		return to 13.right
		14.left = null
		print(14)										//Print(14)
		14.right = null
		return 
		...		
												//Print(15)
												//Print(17)
												//Print(19)

Final InOrder traversal : 1 , 3 , 5 ,6 , 8, 11, 12 , 13 , 14 , 15 , 17 , 19


Why called inorder traversal? prints increasing order in binary search tree
 We have printed value of nodes in increasing order		//
