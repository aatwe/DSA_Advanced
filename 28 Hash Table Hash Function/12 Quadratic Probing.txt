Revision
1) How to insert key value pairs in table of size n 
	using open addressing collision schema
	
	a) initialize x : 1	
	b) calc keyH	
		keyHash := H(k) mod N	
		index := keyHash

	c) loop until we find freeslot	
		while table[index] != null;
		    index = (keyHash + P(k,x)) modN	//collission //offset keyhash using probing function
		x = x + 1			//increment x

	d) insert (k,v) at table[index]

+++++++++++++++++++++++++++++++++++++++++++++++++++++	

What is quadratic probing?
P(x) = ax^2 + bx + c	//a,b,c constants, a!=0


Q) Can we use all quadratic function ? No
		They dont produce cycle of n ---> get stuck in infinite loop


for ex
1)P(x) =  2x^2 + 2 
	H(k) = 4
	N = 9

What cycle occuring?
offset on collision:

H(k) + P(0)mod N = 4
H(k) + P(1)mod N = 7
H(k) + P(2)mod N = 4
H(k) + P(3)mod N = 7
...

What problem in this cycling? we cannot reach index/buckets 0,1,2,3,5,6,8,9

Which probing function will always work?
	1) P(x) = x^2   : table size: prime no. > 3
			load factor alpha < 1/2
	2) P(x) = (x^2 + x)/2 : table size : 2^n  
	
	3) P(x) = (-1^x)* x^2  : table size : prime no. N
				N : satisfy 3mod4

Ex
P(x) = (x^2 + x )/2
Table size: N = 2^3 = 8
Max load factor alpha = 0.4
Threshold before resize : N * alpha =3

insert(k1,v1)
insert(k2,v2)
insert(k3,v3)	
insert(k4,v4)
insert(k3,v5)
insert(k6,v6)
insert(k7,v7)	
	
	
	



H(k1) = 6
//probing function
1) insert(k1,v1)		//H(k1) = 6
H(k1) + P(0) mod N
6 + 0 mod 8 = 6 

2)insert(k2,v2)		H(k2) = 5
5 + P(0)mod8  = 5
3) insert (k3,v3) = 5	//collision // increase x by 1

	H(k1) + P(1)mod8 =  6	//again collision
	H(k1)  + P(2)mod8
	 (5 + 3 )mod8 = 0		//insert at 0

4) insert (k4,v4)
	/note: table threshold reached
		resize the table : double size : keep power 2

5) New table size: 2^4 = 16
Max load factor = alpha = 0.4
New threshold value = N*alpha = 6
Probing function P(x) stays the same


6) place entry from old hash table to new hash table

Old
0	1	3	4	5	6	7
k3v3  	null	null 	null	k2v2	k1v1	null

6a) move k3v3
H(k3) = 5
[H(k3) + P(0) ] modN = 5
put k3v3 at index 5


0	1	3	4	5	6	7
null  	null	null 	null	k3v3	k1v1	null
null  	null	null 	null	null	null	null

6b) move k2v2
H(k2) = 5
[H(k2) + P(0)]modN 
   [   5     +    1  ] mod 16 = 6

6c) move k1v1
6 + 0 mod16 = 6
//all values moved
++++++++++++++++++++++
Continue insertion
6d) move k4v4
	2

6e) k3v5
	we know H(k3) = 5
	//k3 is already in hash table -> update	

	H(k3) + P(0) modN
	   5   + 0 mod 16  = 5	//update 5th bucket from k3v3 to k3v5

0	1   	2	3	4	5	6	7
null  	null	k4v4	null 	null	k3v5	k2v2	k1v1
null  	null	null	null 	null	null	null	null
8	9	10	11	12	13	14	15

...
6f) insert(k7,v7)
H(k7) = 2  --> collision //probe

H(k7) + P(0) mod N
  2      +    0 mod 16 = 2	//increment if still collision

H(k7) + P(1) mod N
 2      +    1  mod16 = 3	//still collision

H(k7) + P(2) mod N
  2	+ 3  mod16  = 5	//still collision

H(k7) + P(3) mod N
  2	+   6  mod 16 = 8	//free slot
	so we insert k7v7 at slot 8

